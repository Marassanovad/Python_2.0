import csv
import json
import pickle
import os


def recreate_file_to_json(file_name: str):
    '''
    # –ó–∞–¥–∞–Ω–∏–µ ‚Ññ1

    # üìå –í—Å–ø–æ–º–∏–Ω–∞–µ–º –∑–∞–¥–∞—á—É 3 –∏–∑ –ø—Ä–æ—à–ª–æ–≥–æ —Å–µ–º–∏–Ω–∞—Ä–∞. –ú—ã —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–ª–∏ —Ç–µ–∫—Å—Ç–æ–≤—ã–∏ÃÜ —Ñ–∞–∏ÃÜ–ª —Å –ø—Å–µ–≤–¥–æ –∏–º–µ–Ω–∞–º–∏ –∏ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ–º —á–∏—Å–µ–ª.
    # üìå –ù–∞–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è —Å–æ–∑–¥–∞–µÃà—Ç –∏–∑ —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ —Ä–∞–Ω–µ–µ —Ñ–∞–∏ÃÜ–ª–∞ –Ω–æ–≤—ã–∏ÃÜ —Å –¥–∞–Ω–Ω—ã–º–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON.
    # üìå –ò–º–µ–Ω–∞ –ø–∏—à–∏—Ç–µ —Å –±–æ–ª—å—à–æ–∏ÃÜ –±—É–∫–≤—ã.
    # üìå –ö–∞–∂–¥—É—é –ø–∞—Ä—É —Å–æ—Ö—Ä–∞–Ω—è–∏ÃÜ—Ç–µ —Å –Ω–æ–≤–æ–∏ÃÜ —Å—Ç—Ä–æ–∫–∏.
    '''
    my_dict = {}

    with(
        open(file_name, 'r', encoding='utf-8') as read_file,
        open('json_file.json', 'a', encoding='utf-8') as writer_file
    ):
        while data := read_file.readline():
            name, num = data.replace('\n', '').split('|')
            my_dict[str(name).title()] = float(num)
        json.dump(my_dict, writer_file, ensure_ascii=False, separators=(',\n', ':'))

def user_input():
    user_list = []
    while True:
        name = input("–í–≤–µ–¥–∏—Ç–µ –∏–º—è: ")
        if not name:
            return user_list
        while True:
            id_ = input("–í–≤–µ–¥–∏—Ç–µ –ª–∏—á–Ω—ã–∏ÃÜ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä: ")
            if id_.isdigit() and not id_ in [uid[2] for uid in user_list]:
                break
        while True:
            access_level = input("–í–≤–µ–¥–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å –¥–æ—Å—Ç—É–ø–∞: ")
            if access_level.isdigit() and 0 < int(access_level) < 8:
                user_list.append((name, access_level, id_))
                break

def unlimited_while(name_file: str):
    '''
    –ó–∞–¥–∞–Ω–∏–µ ‚Ññ2

    üìå –ù–∞–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è –≤ –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ–º —Ü–∏–∫–ª–µ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –∏–º—è, –ª–∏—á–Ω—ã–∏ÃÜ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∏ —É—Ä–æ–≤–µ–Ω—å –¥–æ—Å—Ç—É–ø–∞ (–æ—Ç 1 –¥–æ 7).
    üìå –ü–æ—Å–ª–µ –∫–∞–∂–¥–æ–≥–æ –≤–≤–æ–¥–∞ –¥–æ–±–∞–≤–ª—è–∏ÃÜ—Ç–µ –Ω–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ JSON —Ñ–∞–∏ÃÜ–ª.
    üìå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –≥—Ä—É–ø–ø–∏—Ä—É—é—Ç—Å—è –ø–æ —É—Ä–æ–≤–Ω—é –¥–æ—Å—Ç—É–ø–∞.
    üìå –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤—ã—Å—Ç—É–ø–∞–µ—Ç –∫–ª—é—á–µÃà–º –¥–ª—è –∏–º–µ–Ω–∏.
    üìå –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—Å–µ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã —É–Ω–∏–∫–∞–ª—å–Ω—ã –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç —É—Ä–æ–≤–Ω—è –¥–æ—Å—Ç—É–ø–∞.
    üìå –ü—Ä–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–µ —Ñ—É–Ω–∫—Ü–∏–∏ —É–∂–µ –∑–∞–ø–∏—Å–∞–Ω–Ω—ã–µ –≤ —Ñ–∞–∏ÃÜ–ª –¥–∞–Ω–Ω—ã–µ –¥–æ–ª–∂–Ω—ã —Å–æ—Ö—Ä–∞–Ω—è—Ç—å—Å—è.
    '''
    user_list = user_input()
    result_dict = {}
    for user in user_list:
        if user[1] in result_dict:
            result_dict[user[1]].update({user[2]: user[0]})
        else:
            result_dict[user[1]] = {user[2]: user[0]}
    with open(name_file, 'a+', encoding='utf-8') as writer_file:
        # my_dict = {access_level: {id_: name.title()}}
        json.dump(result_dict, writer_file, indent=4, ensure_ascii=False)

def save_task_2_as_csv(name_file: str):
    '''
    –ó–∞–¥–∞–Ω–∏–µ ‚Ññ3

    –ù–∞–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã–∏ÃÜ –≤ –ø—Ä–æ—à–ª–æ–º –∑–∞–¥–∞–Ω–∏–∏ —Ñ–∞–∏ÃÜ–ª –≤ —Ñ–æ—Ä–º–∞—Ç–µ CSV.
    '''
    with (open(name_file, 'r', encoding='utf-8') as read_file,
          open("task_3.csv", 'w', encoding='utf-8') as write_file):
        json_read = json.load(read_file)
        csv_write = csv.writer(write_file, dialect='excel', quoting=csv.QUOTE_ALL)
        # fieldnames = ["access level", 'id', 'name'],
        # csv_write.writeheader()
        csv_write.writerow(["access level", 'id', 'name'])
        for access_level, value in json_read.items():
            all_data = []
            for id_, name in value.items():
                all_data.append((access_level, name, id_))
            csv_write.writerows(all_data)
            # csv_write.writerows(user[1])

def create_csv_file(name_file: str, new_file='task_4.json'):
    '''
    –ó–∞–¥–∞–Ω–∏–µ ‚Ññ4

    üìå –ü—Ä–æ—á–∏—Ç–∞–∏ÃÜ—Ç–µ —Å–æ–∑–¥–∞–Ω–Ω—ã–∏ÃÜ –≤ –ø—Ä–æ—à–ª–æ–º –∑–∞–¥–∞–Ω–∏–∏ csv —Ñ–∞–∏ÃÜ–ª –±–µ–∑ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è csv.DictReader.
    üìå –î–æ–ø–æ–ª–Ω–∏—Ç–µ id –¥–æ 10 —Ü–∏—Ñ—Ä –Ω–µ–∑–Ω–∞—á–∞—â–∏–º–∏ –Ω—É–ª—è–º–∏.
    üìå –í –∏–º–µ–Ω–∞—Ö –ø–µ—Ä–≤—É—é –±—É–∫–≤—É —Å–¥–µ–ª–∞–∏ÃÜ—Ç–µ –ø—Ä–æ–ø–∏—Å–Ω–æ–∏ÃÜ.
    üìå –î–æ–±–∞–≤—å—Ç–µ –ø–æ–ª–µ —Ö–µ—à –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏–º–µ–Ω–∏ –∏ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞.
    üìå –ü–æ–ª—É—á–∏–≤—à–∏–µ—Å—è –∑–∞–ø–∏—Å–∏ —Å–æ—Ö—Ä–∞–Ω–∏—Ç–µ –≤ json —Ñ–∞–∏ÃÜ–ª, –≥–¥–µ –∫–∞–∂–¥–∞—è —Å—Ç—Ä–æ–∫–∞ csv —Ñ–∞–∏ÃÜ–ª–∞ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∞ –∫–∞–∫ –æ—Ç–¥–µ–ª—å–Ω—ã–∏ÃÜ json —Å–ª–æ–≤–∞—Ä—å.
    üìå –ò–º—è –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –∏ –∫–æ–Ω–µ—á–Ω–æ–≥–æ —Ñ–∞–∏ÃÜ–ª–æ–≤ –ø–µ—Ä–µ–¥–∞–≤–∞–∏ÃÜ—Ç–µ –∫–∞–∫ –∞—Ä–≥—É–º–µ–Ω—Ç—ã —Ñ—É–Ω–∫—Ü–∏–∏.
    '''

    with (open(name_file, 'r', encoding='utf-8') as read_file,
          open(new_file, 'w', encoding='utf-8') as write_file):
        spamreader = csv.reader(read_file, dialect='excel')
        new_dict = {}
        next(spamreader)
        for row in spamreader:
            uid = f'{row[2]:0>10}'
            name = row[1].title()
            lvl = row[0]
            key = hash(uid + name)
            new_dict[key] = [lvl, name, uid]
        json.dump(new_dict, write_file, ensure_ascii=False, indent=4)

def pickle_search_json(path):
    '''
    –ó–∞–¥–∞–Ω–∏–µ ‚Ññ5

    –ù–∞–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è –∏—â–µ—Ç json —Ñ–∞–∏ÃÜ–ª—ã –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–∏ÃÜ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –∏
    —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏—Ö —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –≤ –≤–∏–¥–µ –æ–¥–Ω–æ–∏–º–µÃà–Ω–Ω—ã—Ö pickle —Ñ–∞–∏ÃÜ–ª–æ–≤.
    '''
    for file in (os.listdir()):
        if os.path.isfile(file):
            init_name, init_ext = os.path.join(file).split('.')
            if init_ext == 'json':
                with open(file, 'r', encoding='utf-8') as file:
                    new_dict = json.load(file)
                    with open((init_name + '.' + 'pickle'), 'wb') as file:
                        pickle.dump(new_dict, file)

def pickle_to_csv(file_pickle):
    '''
    –ó–∞–¥–∞–Ω–∏–µ ‚Ññ6

    üìå –ù–∞–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç pickle —Ñ–∞–∏ÃÜ–ª —Ö—Ä–∞–Ω—è—â–∏–∏ÃÜ —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–∏ÃÜ –≤ —Ç–∞–±–ª–∏—á–Ω—ã–∏ÃÜ csv —Ñ–∞–∏ÃÜ–ª.
    üìå –î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—é –≤–æ–∑—å–º–∏—Ç–µ pickle –≤–µ—Ä—Å–∏—é —Ñ–∞–∏ÃÜ–ª–∞ –∏–∑ –∑–∞–¥–∞—á–∏ 4 —ç—Ç–æ–≥–æ —Å–µ–º–∏–Ω–∞—Ä–∞.
    üìå –§—É–Ω–∫—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –∏–∑–≤–ª–µ–∫–∞—Ç—å –∫–ª—é—á–∏ —Å–ª–æ–≤–∞—Ä—è –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ —Å—Ç–æ–ª–±—Ü–∞ –∏–∑ –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–≥–æ —Ñ–∞–∏ÃÜ–ª–∞.
    '''

    with(
        open(file_pickle, 'rb') as read_pickle,
        open("csv_file.csv", 'w', encoding='utf-8') as write_csv
    ):
        new_dict = pickle.load(read_pickle)
        csv_w = csv.DictWriter(write_csv, fieldnames=[value for value in new_dict[0]], dialect='excel', quoting=csv.QUOTE_ALL)
        csv_w.writeheader()
        all_data = []
        for value in new_dict:
            all_data.append(value)
        # all_data.append(new_dict)
        # print(all_data)
        csv_w.writerows(all_data)

def read_file_as_pickle(file: str):
    '''
    –ó–∞–¥–∞–Ω–∏–µ ‚Ññ7

    üìå –ü—Ä–æ—á–∏—Ç–∞–∏ÃÜ—Ç–µ —Å–æ–∑–¥–∞–Ω–Ω—ã–∏ÃÜ –≤ –ø—Ä–æ—à–ª–æ–º –∑–∞–¥–∞–Ω–∏–∏ csv —Ñ–∞–∏ÃÜ–ª –±–µ–∑ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è csv.DictReader.
    üìå –†–∞—Å–ø–µ—á–∞—Ç–∞–∏ÃÜ—Ç–µ –µ–≥–æ –∫–∞–∫ pickle —Å—Ç—Ä–æ–∫—É.
    '''
    with open(file, 'r', newline='', encoding='utf-8') as f:
        csv_file = csv.reader(f)
        for line in csv_file:
            line = pickle.dumps(line)
            print(line)







if __name__ == '__main__':
    # recreate_file_to_json('task_3.txt')
    # unlimited_while('task_2.json')
    # save_task_2_as_csv('task_2.json')
    create_csv_file('task_3.csv')
    # path = os.path.join(os.getcwd())
    # pickle_search_json(path)
    # pickle_to_csv('json_file.pickle') # dont work
    # read_file_as_pickle('csv_file.csv')
