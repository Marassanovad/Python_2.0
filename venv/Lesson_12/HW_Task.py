'''
–ó–∞–¥–∞–Ω–∏–µ
üìå –†–µ—à–∏—Ç—å –∑–∞–¥–∞—á–∏, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ —É—Å–ø–µ–ª–∏ —Ä–µ—à–∏—Ç—å –Ω–∞ —Å–µ–º–∏–Ω–∞—Ä–µ.
üìå –°–æ–∑–¥–∞–∏ÃÜ—Ç–µ –∫–ª–∞—Å—Å —Å—Ç—É–¥–µ–Ω—Ç–∞.
    ‚óã –ò—Å–ø–æ–ª—å–∑—É—è –¥–µ—Å–∫—Ä–∏–ø—Ç–æ—Ä—ã –ø—Ä–æ–≤–µ—Ä—è–∏ÃÜ—Ç–µ –§–ò–û –Ω–∞ –ø–µ—Ä–≤—É—é –∑–∞–≥–ª–∞–≤–Ω—É—é –±—É–∫–≤—É –∏ –Ω–∞–ª–∏—á–∏–µ —Ç–æ–ª—å–∫–æ –±—É–∫–≤.
    ‚óã –ù–∞–∑–≤–∞–Ω–∏—è –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –¥–æ–ª–∂–Ω—ã –∑–∞–≥—Ä—É–∂–∞—Ç—å—Å—è –∏–∑ —Ñ–∞–∏ÃÜ–ª–∞ CSV –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞. –î—Ä—É–≥–∏–µ –ø—Ä–µ–¥–º–µ—Ç—ã –≤ —ç–∫–∑–µ–º–ø–ª—è—Ä–µ –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã.
    ‚óã –î–ª—è –∫–∞–∂–¥–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞ –º–æ–∂–Ω–æ —Ö—Ä–∞–Ω–∏—Ç—å –æ—Ü–µ–Ω–∫–∏ (–æ—Ç 2 –¥–æ 5) –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–æ–≤ (–æ—Ç 0 –¥–æ 100).
    ‚óã –¢–∞–∫–∂–µ —ç–∫–∑–µ–º–ø–ª—è—Ä –¥–æ–ª–∂–µ–Ω —Å–æ–æ–±—â–∞—Ç—å —Å—Ä–µ–¥–Ω–∏–∏ÃÜ –±–∞–ª–ª –ø–æ —Ç–µ—Å—Ç–∞–º –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞ –∏ –ø–æ –æ—Ü–µ–Ω–∫–∞–º –≤—Å–µ—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –≤–º–µ—Å—Ç–µ –≤–∑—è—Ç—ã—Ö.
'''
import csv
from statistics import mean

class Text:

    def __set_name__(self, owner, name):
        self.param_name = '_' + name

    def __get__(self, obj, objtype=None):
        return getattr(obj, self.private_name)

    def __set__(self, obj, value):
        self._validate_name(value)
        setattr(obj, self.param_name, value)

    def _validate_name(self, value):
        if not isinstance(value, str):
            raise AttributeError('–î–æ–ª–∂–Ω–æ –±—ã—Ç—å —Å—Ç—Ä–æ–∫–æ–≤–æ–≥–æ —Ç–∏–ø–∞')
        if not value.isalpha():
            raise AttributeError('–î–æ–ª–∂–Ω—ã –±—ã—Ç—å —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã')
        if not value.istitle():
            raise AttributeError('–î–æ–ª–∂–Ω–æ –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å –±–æ–ª—å—à–æ–π –±—É–∫–≤—ã')

class Rating:

    def __init__(self, min_value: int = None, max_value: int = None):
        self._min_value = min_value
        self._max_value = max_value

    def __set_name__(self, owner, name):
        self.private_item = '_' + name
        print(self.private_item)

    def __get__(self, obj, objtype=None):
        return getattr(obj, self.private_item)

    def __set__(self, obj, value: dict):
        self._validate_range(value)
        self._validate_items(value)
        setattr(obj, self.private_item, value)

    def _validate_range(self, value: dict):
        for value in value.values():
            for value_tuple in value:
                if not isinstance(value_tuple, int):
                    raise TypeError(f'–ó–Ω–∞—á–µ–Ω–∏–µ {value_tuple} –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Ü–µ–ª—ã–º —á–∏—Å–ª–æ–º')
                if value_tuple is not None and value_tuple < self._min_value:
                    raise ValueError(f'–ó–Ω–∞—á–µ–Ω–∏–µ {value_tuple} –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ –∏–ª–∏ —Ä–∞–≤–Ω–æ {self._min_value}')
                if value_tuple is not None and value_tuple > self._max_value:
                    raise ValueError(f'–ó–Ω–∞—á–µ–Ω–∏–µ {value_tuple} –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –º–µ–Ω—å—à–µ –∏–ª–∏ —Ä–∞–≤–Ω–æ {self._max_value}')

    def _validate_items(self, value: dict):
        data = self._load_data()
        valid = 0
        for d in data:
            for v in value:
                if d == v:
                    valid += 1
        if valid != len(value):
            raise AttributeError(f'–ü—Ä–µ–¥–º–µ—Ç–∞ –Ω–µ—Ç –≤ —Å–ø–∏—Å–∫–µ')

    def _load_data(self):
        data = {}
        file_name = 'school_items.csv'
        i = 0
        with open(file_name, encoding='utf-8') as f:
            csv_reader = csv.reader(f)
            for item in csv_reader:
                res = ''.join(item).strip()
                i += 1
                if i != 1:
                    data[res] = None
        return data

class Student:
    name: str = Text()
    surname: str = Text()
    lesson_rating: dict = Rating(2, 5)
    test_rating: dict = Rating(0, 100)

    def __init__(self, name, surname):
        self._name = name
        self._surname = surname
        self._subject: dict[str: tuple] = {}
        self._tests: dict[str: tuple] = {}

    def __str__(self):
        return f'{self._name} {self._surname} \n' \
               f'–û—Ü–µ–Ω–∫–∏ –ø–æ –ø—Ä–µ–¥–º–µ—Ç–∞–º: {self._subject} \n' \
               f'–û—Ü–µ–Ω–∫–∏ –ø–æ —Ç–µ—Å—Ç–∞–º: {self._test} \n' \
               f'–°—Ä–µ–¥–Ω–∏–∏ÃÜ –±–∞–ª–ª –ø–æ —Ç–µ—Å—Ç–∞–º: {self.average_test_rating()} \n' \
               f'–°—Ä–µ–¥–Ω–∏–∏ÃÜ –±–∞–ª–ª –ø–æ –ø—Ä–µ–¥–º–µ—Ç–∞–º: {self.average_subject_rating()} \n' \
               f'–°—Ä–µ–¥–Ω–∏–∏ÃÜ –±–∞–ª–ª –ø–æ –≤—Å–µ–º –ø—Ä–µ–¥–º–µ—Ç–∞–º: {self.average_subject_rating()} \n'

    def average_test_rating(self):
        avg_res = {}
        for k, v in self._test.items():
            avg_res[k] = round(mean(v), 1)
        return avg_res

    def average_subject_rating(self):
        avg_res = {}
        for k, v in self._subject.items():
            avg_res[k] = round(mean(v), 1)
        return avg_res

    def average_all_rating(self):
        res = 0
        for v in self._subject.values():
            res += mean(v)
        return round((res / len(self._subject.values())), 2)






if __name__ == '__main__':
    student = Student('Li', 'Kim')
    student._subject = {'–§–∏–∑–∏–∫–∞': (40, 5, 3), '–ë–∏–æ–ª–æ–≥–∏—è': (30, 3, 4, 5), '–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞': (3, 5, 5, 5)}
    student._test = {'–õ–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞': (20, 40, 100), '–•–∏–º–∏—è': (0, 50, 80)}
    print(student)


