import json
from collections import defaultdict


'''
–ó–∞–¥–∞–Ω–∏–µ ‚Ññ1
üìå –°–æ–∑–¥–∞–∏ÃÜ—Ç–µ –∫–ª–∞—Å—Å-—Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä—ã–∏ÃÜ —Å—á–∏—Ç–∞–µ—Ç —Ñ–∞–∫—Ç–æ—Ä–∏–∞–ª —á–∏—Å–ª–∞ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞.
üìå –≠–∫–∑–µ–º–ø–ª—è—Ä –¥–æ–ª–∂–µ–Ω –∑–∞–ø–æ–º–∏–Ω–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ k –∑–Ω–∞—á–µ–Ω–∏–∏ÃÜ.
üìå –ü–∞—Ä–∞–º–µ—Ç—Ä k –ø–µ—Ä–µ–¥–∞–µÃà—Ç—Å—è –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞.
üìå –î–æ–±–∞–≤—å—Ç–µ –º–µ—Ç–æ–¥ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ä–∞–Ω–µ–µ –≤—ã–∑—ã–≤–∞–µ–º—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–∏ÃÜ –∏ –∏—Ö —Ñ–∞–∫—Ç–æ—Ä–∏–∞–ª–æ–≤.

 –ó–∞–¥–∞–Ω–∏–µ ‚Ññ2
üìå –î–æ—Ä–∞–±–æ—Ç–∞–µ–º –∑–∞–¥–∞—á—É 1.
üìå –°–æ–∑–¥–∞–∏ÃÜ—Ç–µ –º–µ–Ω–µ–¥–∂–µ—Ä –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞, –∫–æ—Ç–æ—Ä—ã–∏ÃÜ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –∑–Ω–∞—á–µ–Ω–∏—è –≤ JSON —Ñ–∞–∏ÃÜ–ª.

 –ó–∞–¥–∞–Ω–∏–µ ‚Ññ3
üìå –°–æ–∑–¥–∞–∏ÃÜ—Ç–µ –∫–ª–∞—Å—Å-–≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä.
üìå –≠–∫–∑–µ–º–ø–ª—è—Ä –∫–ª–∞—Å—Å–∞ –¥–æ–ª–∂–µ–Ω –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ñ–∞–∫—Ç–æ—Ä–∏–∞–ª —á–∏—Å–ª–∞ –≤
–¥–∏–∞–ø–∞–∑–æ–Ω–µ –æ—Ç start –¥–æ stop —Å —à–∞–≥–æ–º step.
üìå –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω—ã –¥–≤–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞, —Å—á–∏—Ç–∞–µ–º step=1.
üìå –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω –æ–¥–∏–Ω –ø–∞—Ä–∞–º–µ—Ç—Ä, —Ç–∞–∫–∂–µ —Å—á–∏—Ç–∞–µ–º start=1.

 –ó–∞–¥–∞–Ω–∏–µ ‚Ññ4
üìå –î–æ—Ä–∞–±–æ—Ç–∞–∏ÃÜ—Ç–µ –∫–ª–∞—Å—Å –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫ –∏–∑ –ø—Ä–æ—à–ª—ã—Ö —Å–µ–º–∏–Ω–∞—Ä–æ–≤.
üìå –î–æ–±–∞–≤—å—Ç–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∏–∑–º–µ–Ω—è—Ç—å –¥–ª–∏–Ω—É –∏ —à–∏—Ä–∏–Ω—É –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–∞ –∏ –≤—Å—Ç—Ä–æ–∏ÃÜ—Ç–µ –∫–æ–Ω—Ç—Ä–æ–ª—å –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–∏ÃÜ (–æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã—Ö).
üìå –ò—Å–ø–æ–ª—å–∑—É–∏ÃÜ—Ç–µ –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä—ã —Å–≤–æ–∏ÃÜ—Å—Ç–≤.


 –ó–∞–¥–∞–Ω–∏–µ ‚Ññ5
üìå –î–æ—Ä–∞–±–æ—Ç–∞–µ–º –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫ –∏ –¥–æ–±–∞–≤–∏–º —ç–∫–æ–Ω–æ–º–∏—é –ø–∞–º—è—Ç–∏ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–≤–æ–∏ÃÜ—Å—Ç–≤ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –±–µ–∑ —Å–ª–æ–≤–∞—Ä—è __dict__.

 –ó–∞–¥–∞–Ω–∏–µ ‚Ññ6
üìå –ò–∑–º–µ–Ω—è–µ–º –∫–ª–∞—Å—Å –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–∞.
üìå –ó–∞–º–µ–Ω—è–µ–º –ø–∞—Ä—É –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä–æ–≤ –ø—Ä–æ–≤–µ—Ä—è—é—â–∏—Ö –¥–ª–∏–Ω—É –∏ —à–∏—Ä–∏–Ω—É –Ω–∞ –¥–µ—Å–∫—Ä–∏–ø—Ç–æ—Ä —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–∏ÃÜ —Ä–∞–∑–º–µ—Ä–∞.
'''


class Factorial:

    def __init__(self):
        self.results = defaultdict(list)

    def __call__(self, number):
        result = 1
        for i in range(1, number + 1):
            result *= i
        self.results[number].append(result)

    def __str__(self):
        txt = '\n'.join((f'{k}: {v}' for k, v in self.results.items()))
        return txt

    def __enter__(self):
        return self

    def __exit__(self, exc_type, exc_val, exc_tb):
        new_file = open("manager_file.json", "w", encoding="utf-8")
        json.dump(self.results, new_file, indent=4, ensure_ascii=False)
        new_file.close()


class MyGenarator:

    def __init__(self, *args):
        start, stop, step, result = 1, 1, 1, 1
        if len(args) == 1:
            stop = args[0]
        elif len(args) == 2:
            start = args[0]
            stop = args[1]
        elif len(args) == 3:
            start = args[0]
            stop = args[1]
            step = args[2]
        else:
            raise AttributeError

        if start < stop:
            self.start = start
            self.stop = stop
            self.step = step
            self.result = result
            self.iter_step = 0

    def __iter__(self):
        return self

    def __next__(self):
        self.result *= (self.start + self.step * self.iter_step)

        if self.start + self.step * self.iter_step >= self.stop:
            raise StopIteration
        self.iter_step += 1
        return self.result

class Value:
    def __init__(self, min_value: int = None, max_value: int = None):
        self.min_value = min_value
        self.max_value = max_value

    def __set_name__(self, owner, name):
        self.param_name = '_' + name

    def __get__(self, instance, owner):
        return getattr(instance, self.param_name)

    def __set__(self, instance, value):
        self.validate(value)
        setattr(instance, self.param_name, value)

    def __delete__(self, instance):
        raise AttributeError(f'–°–≤–æ–∏ÃÜ—Å—Ç–≤–æ "{self.param_name}" –Ω–µ–ª—å–∑—è —É–¥–∞–ª—è—Ç—å')


def validate(self, value):
    if not isinstance(value, int):
        raise TypeError(f'–ó–Ω–∞—á–µ–Ω–∏–µ {value} –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Ü–µ–ª—ã–º —á–∏—Å–ª–æ–º')
    if self.min_value is not None and value < self.min_value:
        raise ValueError(f'–ó–Ω–∞—á–µ–Ω–∏–µ {value} –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ 18 –∏–ª–∏ —Ä–∞–≤–Ω–æ {self.min_value}')
    if self.max_value is not None and value >= self.max_value:
        raise ValueError(f'–ó–Ω–∞—á–µ–Ω–∏–µ {value} –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –º–µ–Ω—å—à–µ {self.max_value}')


class Rectangle:

    # __slots__ = ['_length', '_width']

    _length = Range(1)
    _width = Range(1)


    def __init__(self, length: int, width: int = None):
        self._length = length
        self._width = width if width is not None else length

    def perimeter(self):
        ''' Perimeter'''
        return (self._length + self._width) * 2

    def square(self):
        ''' Square'''
        return self._length * self._width

    def __doc__(self):
        return "–î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è"

    def __add__(self, other):
        ''' —Å–ª–æ–∂–µ–Ω–∏—è'''
        return self.perimeter() + other.perimeter()

    def __sub__(self, other):
        ''' –≤—ã—á–∏—Ç–∞–Ω–∏—è '''
        return abs(self.perimeter() - other.perimeter())

    def __eq__(self, other):
        ''' —Å—Ä–∞–≤–Ω–µ–Ω–∏—è'''
        return self.square() == other.square()

    def __ne__(self, other):
        ''' —Å—Ä–∞–≤–Ω–µ–Ω–∏—è'''
        return self.square() != other.square()

    def __gt__(self, other):
        ''' —Å—Ä–∞–≤–Ω–µ–Ω–∏—è'''
        return self.square() > other.square()

    def __ge__(self, other):
        ''' —Å—Ä–∞–≤–Ω–µ–Ω–∏—è'''
        return self.square() >= other.square()

    def __lt__(self, other):
        ''' —Å—Ä–∞–≤–Ω–µ–Ω–∏—è'''
        return self.square() < other.square()

    def __le__(self, other):
        ''' —Å—Ä–∞–≤–Ω–µ–Ω–∏—è'''
        return self.square() <= other.square()

    def __str__(self):
        return f'–î–ª–∏–Ω–∞ - {self._length}, –®–∏—Ä–∏–Ω–∞ - {self._width}'

    def __repr__(self):
        return f'–î–ª–∏–Ω–∞ - {self._length}, –®–∏—Ä–∏–Ω–∞ - {self._width}'

    @property
    def length(self):
        self._length = self._length

    @property
    def width(self):
        self._width = self._width

    @length.setter
    def length(self, value):
        if value > 0:
            self._length = value
        else:
            raise ValueError

    @wigth.setter
    def width(self, value):
        if value > 0:
            self._width = value
        else:
            raise ValueError


if __name__ == '__main__':
    factor = Factorial()

    factor(1)
    factor(10)
    factor(3)
    factor(2)

    print(factor)
    with factor as new_file:
        new_file(10)

    my_gener = MyGenarator(10, 51, 10)
    for i in my_gener:
        print(i)

