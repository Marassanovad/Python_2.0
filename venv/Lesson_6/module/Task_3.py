#Задание №4

# Создайте модуль с функцией внутри.
# Функция получает на вход загадку, список с возможными вариантами отгадок и количество попыток на угадывание.
# Программа возвращает номер попытки, с которой была отгадана загадка или ноль, если попытки исчерпаны.

# Добавьте в модуль с загадками функцию, которая хранит словарь списков.
# Ключ словаря - загадка, значение - список с отгадками.
# Функция в цикле вызывает загадывающую функцию, чтобы передать ей все свои загадки.

# Добавьте в модуль с загадками функцию, которая принимает на вход строку (текст загадки)
# и число (номер попытки, с которой она угадана).
# Функция формирует словарь с информацией о результатах отгадывания.
# Для хранения используйте защищённый словарь уровня модуля.
# Отдельно напишите функцию, которая выводит результаты угадывания
# из защищённого словаря в удобном для чтения виде.
# Для формирования результатов используйте генераторное выражение.


_dict_result = {}
def mystery(zagadka: str, answers: list[str], count=5):
    print(f"Загадка: \n {zagadka}")
    try_ = 1
    while count:
        user_answers = input("Ваш ответ: ").lower()
        if user_answers in answers:
            return try_
        try_ += 1
        count -= 1
    return 0

def puzzles():
    puzzle = {"Зимой и летом одним цветом":['ель', 'елка', 'ёлка'],
              "Висит груша нельзя скушать": ['лампочка'],
              "Не лает, не кусает в дом не пускает": ['замок', 'замочек']}
    for key, value in puzzle.items():
        number_of_guesses(key, mystery(key,value))



def number_of_guesses(zagadka: str, count: int):
    _dict_result[zagadka] = count

def result_():
    for key, value in _dict_result.items():
        print(f"Загадка - {key} \n  Угадана с {value} попытки")