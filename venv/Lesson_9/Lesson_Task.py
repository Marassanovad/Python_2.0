import json
import os.path
from typing import Callable
import random
from functools import wraps

'''
–ó–∞–¥–∞–Ω–∏–µ ‚Ññ1
üìå –°–æ–∑–¥–∞–∏ÃÜ—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é-–∑–∞–º—ã–∫–∞–Ω–∏–µ, –∫–æ—Ç–æ—Ä–∞—è –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –¥–≤–∞ —Ü–µ–ª—ã—Ö —á–∏—Å–ª–∞:
    ‚óã –æ—Ç 1 –¥–æ 100 –¥–ª—è –∑–∞–≥–∞–¥—ã–≤–∞–Ω–∏—è,
    ‚óã –æ—Ç 1 –¥–æ 10 –¥–ª—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ–ø—ã—Ç–æ–∫
üìå –§—É–Ω–∫—Ü–∏—è –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è —á–µ—Ä–µ–∑ –∫–æ–Ω—Å–æ–ª—å –ø—Ä–æ—Å–∏—Ç —É–≥–∞–¥–∞—Ç—å –∑–∞–≥–∞–¥–∞–Ω–Ω–æ–µ —á–∏—Å–ª–æ –∑–∞ —É–∫–∞–∑–∞–Ω–Ω–æ–µ —á–∏—Å–ª–æ –ø–æ–ø—ã—Ç–æ–∫.


–ó–∞–¥–∞–Ω–∏–µ ‚Ññ2
üìå –î–æ—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–¥–∞—á—É 1.
üìå –ü—Ä–µ–≤—Ä–∞—Ç–∏—Ç–µ –≤–Ω–µ—à–Ω—é—é —Ñ—É–Ω–∫—Ü–∏—é –≤ –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä.
üìå –û–Ω –¥–æ–ª–∂–µ–Ω –ø—Ä–æ–≤–µ—Ä—è—Ç—å –≤—Ö–æ–¥—è—Ç –ª–∏ –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–µ –≤ —Ñ—É–Ω–∫—Ü–∏—é- —É–≥–∞–¥–∞–∏ÃÜ–∫—É —á–∏—Å–ª–∞ –≤ –¥–∏–∞–ø–∞–∑–æ–Ω—ã [1, 100] –∏ [1, 10].
üìå –ï—Å–ª–∏ –Ω–µ –≤—Ö–æ–¥—è—Ç, –≤—ã–∑—ã–≤–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏—é —Å–æ —Å–ª—É—á–∞–∏ÃÜ–Ω—ã–º–∏ —á–∏—Å–ª–∞–º–∏ –∏–∑ –¥–∏–∞–ø–∞–∑–æ–Ω–æ–≤.


–ó–∞–¥–∞–Ω–∏–µ ‚Ññ3
üìå –ù–∞–ø–∏—à–∏—Ç–µ –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä, –∫–æ—Ç–æ—Ä—ã–∏ÃÜ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤ json —Ñ–∞–∏ÃÜ–ª –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–µ–∫–æ—Ä–∏—Ä—É–µ–º–æ–∏ÃÜ —Ñ—É–Ω–∫—Ü–∏–∏ –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç, –∫–æ—Ç–æ—Ä—ã–∏ÃÜ –æ–Ω–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç.–ü—Ä–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–º –≤—ã–∑–æ–≤–µ —Ñ–∞–∏ÃÜ–ª –¥–æ–ª–∂–µ–Ω —Ä–∞—Å—à–∏—Ä—è—Ç—å—Å—è, –∞ –Ω–µ –ø–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞—Ç—å—Å—è.
üìå –ö–∞–∂–¥—ã–∏ÃÜ –∫–ª—é—á–µ–≤–æ–∏ÃÜ –ø–∞—Ä–∞–º–µ—Ç—Ä —Å–æ—Ö—Ä–∞–Ω–∏—Ç–µ –∫–∞–∫ –æ—Ç–¥–µ–ª—å–Ω—ã–∏ÃÜ –∫–ª—é—á json —Å–ª–æ–≤–∞—Ä—è.
üìå –î–ª—è –¥–µ–∫–æ—Ä–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è –º–æ–∂–µ—Ç –ø—Ä–∏–Ω–∏–º–∞—Ç—å –∫–∞–∫ –ø–æ–∑–∏—Ü–∏–æ–Ω–Ω—ã–µ, —Ç–∞–∫ –∏ –∫–ª—é—á–µ–≤—ã–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã.
üìå –ò–º—è —Ñ–∞–∏ÃÜ–ª–∞ –¥–æ–ª–∂–Ω–æ —Å–æ–≤–ø–∞–¥–∞—Ç—å —Å –∏–º–µ–Ω–µ–º –¥–µ–∫–æ—Ä–∏—Ä—É–µ–º–æ–∏ÃÜ —Ñ—É–Ω–∫—Ü–∏–∏.

–ó–∞–¥–∞–Ω–∏–µ ‚Ññ4
üìå –°–æ–∑–¥–∞–∏ÃÜ—Ç–µ –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º.
üìå –ü–∞—Ä–∞–º–µ—Ç—Ä - —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—É—Å–∫–æ–≤ –¥–µ–∫–æ—Ä–∏—Ä—É–µ–º–æ–∏ÃÜ —Ñ—É–Ω–∫—Ü–∏–∏.

–ó–∞–¥–∞–Ω–∏–µ ‚Ññ5
üìå –û–±—ä–µ–¥–∏–Ω–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∏–∑ –ø—Ä–æ—à–ª—ã—Ö –∑–∞–¥–∞—á.
üìå –§—É–Ω–∫—Ü–∏—é —É–≥–∞–¥–∞–∏ÃÜ–∫—É –∑–∞–¥–µ–∫–æ—Ä–∏—Ä—É–∏ÃÜ—Ç–µ:
    ‚óã –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä–∞–º–∏ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤,
    ‚óã –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä–æ–º –∫–æ–Ω—Ç—Ä–æ–ª—è –∑–Ω–∞—á–µ–Ω–∏–∏ÃÜ –∏
    ‚óã –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä–æ–º –¥–ª—è –º–Ω–æ–≥–æ–∫—Ä–∞—Ç–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞.
üìå –í—ã–±–µ—Ä–∏—Ç–µ –≤–µ—Ä–Ω—ã–∏ÃÜ –ø–æ—Ä—è–¥–æ–∫ –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä–æ–≤.

–ó–∞–¥–∞–Ω–∏–µ ‚Ññ6
üìå –î–æ—Ä–∞–±–æ—Ç–∞–∏ÃÜ—Ç–µ –ø—Ä–æ—à–ª—É—é –∑–∞–¥–∞—á—É –¥–æ–±–∞–≤–∏–≤ –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä wraps –≤ –∫–∞–∂–¥—ã–∏ÃÜ –∏–∑ –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä–æ–≤.
'''

# def outer() -> Callable:  #–ó–∞–¥–∞—á–∞ —É—á–∏—Ç–µ–ª—è
#     num_range = int(input('–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 0 –¥–æ 100: '))
#     attemps = int(input('–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 0 –¥–æ 10: '))
#     num_sc = random.randint(1, num_range)
#
#     def inner() -> None:
#         nonlocal  num_range, attemps
#         while attemps:
#             print(f'–û—Å—Ç–∞–ª–æ—Å—å {attemps} –ø–æ–ø—ã—Ç–æ–∫')
#             attemps -= 1
#             num = int(input('–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ: '))
#             if num == num_sc:
#                 print(f'–í—ã —É–≥–∞–¥–∞–ª–∏')
#             else:
#                 advice = ['–º–µ–Ω—å—à–µ','–±–æ–ª—å—à–µ']
#                 print(f'–í–∞—à–∞ —á–∏—Å–ª–æ {advice[num > num_sc]} –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ')
#         else:
#             print(f'–í—ã –ø—Ä–æ–≥–∏–≥—Ä–∞–ª–∏. –ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ —á–∏—Å–ª–æ {num_sc}')
#     return inner

def function_closure_guess() -> Callable:
    num = int(input('–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 0 –¥–æ 100: '))
    count_try = int(input('–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 0 –¥–æ 10: '))
    num_sc = random.randint(1, num)

    def random_numbers() -> None:
        nonlocal count_try, num_sc
        for i in range(1, count_try + 1):
            user_input = int(input('–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ: '))
            if num_sc < user_input:
                print("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –º–µ–Ω—å—à–µ")
            elif num_sc > user_input:
                print("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –±–æ–ª—å—à–µ")
            else:
                print(f'–í—ã —É–≥–∞–¥–∞–ª–∏ —Å {i} –ø–æ–ø—ã—Ç–∫–∏')
                break
        else:
            print('–í—ã –Ω–µ —É–≥–∞–¥–∞–ª–∏')
    return random_numbers

def checked_num(func: Callable):
    @wraps(func)
    def wrapper(count_try: int, num_sc: int):
        num_sc = num_sc if 0 < num_sc < 101 else random.randint(1, 100)
        count_try = count_try if 0 < count_try < 11 else random.randint(1, 10)
        result = func(count_try, num_sc)
        return result
    return wrapper

def writer(file_name):
    def inner_fun(func):
        @wraps(func)
        def wrapper(count_try, num_sc):
            my_dict = {func(count_try, num_sc): [count_try, num_sc]}
            if os.path.exists(file_name):
                with open(file_name, 'a', encoding='utf-8') as f:
                    json.dump(my_dict, f, indent=3, ensure_ascii=False)
            else:
                with open(file_name, 'w', encoding='utf-8') as f:
                    json.dump(my_dict, f, indent=3, ensure_ascii=False)
            return my_dict
        return wrapper
    return inner_fun

@writer('file.json')
def func_for_json(*args, **kwargs) -> str:
    ls_for_args = []
    ls_for_kwargs = []
    if args:
        for i in args:
            ls_for_args.append(i)
    if kwargs:
        for key, value in kwargs.items():
            ls_for_kwargs.append(f'{key}={value}')
    return ' '.join(list(map(str, ls_for_args))) + ' '.join(list(map(str, ls_for_kwargs)))

def counter(num):
    def deco(func):
        @wraps(func)
        def wrapper(*args, **kwargs):
            res = []
            for _ in range(num):
                res.append(func(*args, **kwargs))
            return res
        return wrapper
    return deco

# @counter(5)
# def func_for_task4(a, b):
#     return a + b



@counter(2)
@checked_num
@writer('game.json')
# @deco
def game_func(count_try, num_sc) -> None:
    '''
    –§—É–Ω–∫—Ü–∏—é- —É–≥–∞–¥–∞–∏ÃÜ–∫—É —á–∏—Å–ª–∞ –≤ –¥–∏–∞–ø–∞–∑–æ–Ω—ã [1, 100] –∏ [1, 10].
    :param count_try: –∫–æ–ª-–≤–æ –ø–æ–ø—ã—Ç–æ–∫
    :param num_sc: –∑–∞–≥–∞–¥–∞–Ω–Ω–æ–µ —á–∏—Å–ª–æ
    :return: None
    '''
    
    print(num_sc)
    while count_try:
        print(f'–û—Å—Ç–∞–ª–æ—Å—å {count_try} –ø–æ–ø—ã—Ç–æ–∫')
        count_try -=1
        user_input = int(input('–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ: '))
        if num_sc < user_input:
            print("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –º–µ–Ω—å—à–µ")
        elif num_sc > user_input:
            print("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –±–æ–ª—å—à–µ")
        else:
            print(f'–í—ã —É–≥–∞–¥–∞–ª–∏.–ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ —á–∏—Å–ª–æ {num_sc}')
            return num_sc
            # break
    else:
        print(f'–í—ã –Ω–µ —É–≥–∞–¥–∞–ª–∏.–ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ —á–∏—Å–ª–æ {num_sc}')
        return num_sc
if __name__ == '__main__':
    # print(func_for_json(1, 2, 3, 4, 5, 6, 1))
    # print(func_for_json(tex='1, 2, 3,', text2='4', num=[5, 6, 1]))
    # game_func(10, 110)
    print(f'{game_func.__name__ = }')
    help(game_func)
    # game = outer()
    # game()
    # res = function_closure_guess()
    # res()
    # print(func_for_task4(2,3))
