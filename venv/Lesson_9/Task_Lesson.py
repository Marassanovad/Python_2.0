from typing import Callable

def deco():
    '''
    –ó–∞–¥–∞–Ω–∏–µ ‚Ññ2

    üìå –î–æ—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–¥–∞—á—É 1.
    üìå –ü—Ä–µ–≤—Ä–∞—Ç–∏—Ç–µ –≤–Ω–µ—à–Ω—é—é —Ñ—É–Ω–∫—Ü–∏—é –≤ –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä.
    üìå –û–Ω –¥–æ–ª–∂–µ–Ω –ø—Ä–æ–≤–µ—Ä—è—Ç—å –≤—Ö–æ–¥—è—Ç –ª–∏ –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–µ –≤ —Ñ—É–Ω–∫—Ü–∏—é- —É–≥–∞–¥–∞–∏ÃÜ–∫—É —á–∏—Å–ª–∞ –≤ –¥–∏–∞–ø–∞–∑–æ–Ω—ã [1, 100] –∏ [1, 10].
    üìå –ï—Å–ª–∏ –Ω–µ –≤—Ö–æ–¥—è—Ç, –≤—ã–∑—ã–≤–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏—é —Å–æ —Å–ª—É—á–∞–∏ÃÜ–Ω—ã–º–∏ —á–∏—Å–ª–∞–º–∏ –∏–∑ –¥–∏–∞–ø–∞–∑–æ–Ω–æ–≤.
    '''

def function_closure_guess(count_try: int, num: int) -> Callable[[str], str]:
    '''
    –ó–∞–¥–∞–Ω–∏–µ ‚Ññ1

    üìå –°–æ–∑–¥–∞–∏ÃÜ—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é-–∑–∞–º—ã–∫–∞–Ω–∏–µ, –∫–æ—Ç–æ—Ä–∞—è –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –¥–≤–∞ —Ü–µ–ª—ã—Ö —á–∏—Å–ª–∞:
        ‚óã –æ—Ç 1 –¥–æ 100 –¥–ª—è –∑–∞–≥–∞–¥—ã–≤–∞–Ω–∏—è,
        ‚óã –æ—Ç 1 –¥–æ 10 –¥–ª—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ–ø—ã—Ç–æ–∫
    üìå –§—É–Ω–∫—Ü–∏—è –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è —á–µ—Ä–µ–∑ –∫–æ–Ω—Å–æ–ª—å –ø—Ä–æ—Å–∏—Ç —É–≥–∞–¥–∞—Ç—å –∑–∞–≥–∞–¥–∞–Ω–Ω–æ–µ —á–∏—Å–ª–æ –∑–∞ —É–∫–∞–∑–∞–Ω–Ω–æ–µ —á–∏—Å–ª–æ –ø–æ–ø—ã—Ç–æ–∫.
    '''

    def random_numbers():
        for i in range(1, count_try + 1):
            user_input = input('–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ: ')
            if int(user_input) == num:
                print(f'–í—ã —É–≥–∞–¥–∞–ª–∏ —Å {i} –ø–æ–ø—ã—Ç–∫–∏')
                break
        else:
            print('–í—ã –Ω–µ —É–≥–∞–¥–∞–ª–∏')
    return random_numbers()

if __name__ == '__main__':
    res = function_closure_guess(2, 10)
    print(type(function_closure_guess), function_closure_guess.__name__)
    print(type(res))
    # , res.__name__)
    # print(res(20))

