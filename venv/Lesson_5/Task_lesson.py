
def task_1():
    '''
    Задание №1

    Пользователь вводит строку из четырёх
    или более целых чисел, разделённых символом “/”.
    Сформируйте словарь, где:
    второе и третье число являются ключами.
    первое число является значением для первого ключа.
    четвертое и все возможные последующие числа хранятся в кортеже как значения второго ключа.
    '''

    a, b, c, *d = input("Введите число: ").split("/")
    dict_res = {int(b): int(a), int(c): tuple(map(int,d))}
    return dict_res

def dict_alpha():
    '''
    Задание №2

    Самостоятельно сохраните в переменной строку текста.
    Создайте из строки словарь, где ключ — буква, а значение — код буквы.
    Напишите преобразование в одну строку.
    '''

    text = 'qasdefdvvfdd'
    dict_result = {i: ord(i) for i in text}

    '''
    Задание №3
    
    Возьмите словарь, который вы получили.
    Сохраните его итераторатор.
    Далее выведите первые 5 пар ключ-значение, обращаясь к итератору, а не к словарю.
    '''
    new_dict = iter(dict_result.items())
    for _ in range(5):
        print(next(new_dict))

    # return dict_result

def not_sum_eight():
    '''
    Задание №4

    Создайте генератор чётных чисел от нуля до 100.
    Из последовательности исключите
    числа, сумма цифр которых равна 8.
    Решение в одну строку.
    '''

    print(*(i for i in range(2, 101, 2) if (i % 10 + i//10) != 8))

def fizz_and_buzz():
    '''
    Задание №7

    ✔ Напишите программу, которая выводит на экран числа от 1 до 100.
    ✔ При этом вместо чисел, кратных трем, программа должна выводить слово «Fizz»
    ✔ Вместо чисел, кратных пяти — слово «Buzz».
    ✔ Если число кратно и 3, и 5, то программа
    должна выводить слово «FizzBuzz».
    ✔ *Превратите решение в генераторное выражение.
    '''
    for i in range(101):
        if i % 15 == 0:
            yield 'FizzBizz'
        elif i % 3 == 0:
            yield 'Fizz'
        elif i % 5 == 0:
            yield 'Bizz'
        else:
            yield i

def multiplication_table_gen():
    '''
    Задание №6

    Выведите в консоль таблицу умножения от 2х2 до 9х10 как на школьной тетрадке.
    Таблицу создайте в виде однострочного генератора, где каждый элемент генератора — отдельный пример таблицы умножения.
    Для вывода результата используйте «принт» без перехода на новую строку.
    '''

    print('\n\n'.join(('\n'.join('\t\t'.join(f'{i:^3} x {j:^3} = {i * j:^3}' for i in range(i[0], i[1])) for j in range(2, 11)) for i in [(2, 6), (6, 10)])), sep='')

def simple_num(num):
    '''
    Функция для нахождения простого числа
    P.S. дополнения для задачи 7
    '''
    if num % 2 == 0:
        return False
    for dev in range(3, num // 2 + 1, 2):
        if num % dev == 0:
            return False
    return True

def simple_num_gen(num: int):
    '''
    Задача №7

    Создайте функцию-генератор.
    Функция генерирует N простых чисел,
    начиная с числа 2.
    Для проверки числа на простоту используйте правило:
    «число является простым, если делится нацело только на единицу и на себя».
    '''
    for i in range(1, num + 1):
        if i == 2:
            yield i
        if simple_num(i):
            yield i



if __name__ == '__main__':
    print(task_1())
    # print(dict_alpha())
    # not_sum_eight()
    # print(*('FizzBuzz' if i % 15 == 0 else 'Fizz' if i % 3 == 0 else 'Buzz' if i % 5 == 0 else i for i in range(1, 101)), sep='\n')
    # result = iter(fizz_and_buzz())
    # # multiplication_table_gen()
    # # print(simple_num(20))
    # # l = simple_num_gen(150)
    # for _ in range(101):
    #     print(next(result))
